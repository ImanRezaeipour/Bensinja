


<script>
 

    var getFacility = function () {
        $.ajax({
            url: "/Vendor/_Facility",
            type: 'get',
            success: function (data) {

                $("#facilities").append(data);
            }
        });
    }
    setTimeout(getFacility, 1000);
    L.cedarmaps.accessToken = "eab57b3d3645b5f10107ce28aa185b85083d62bf";


    // Setting up our DOM elements and global scope variables.
    var form = document.getElementById('form'),
        provincesList = document.getElementById('provinces'),
        citiesList = document.getElementById('cities'),
        localitiesList = document.getElementById('localities'),
        streetsInput = document.getElementById('streets'),
        toggleCheckbox = document.getElementById('toggle-checkbox'),
        loading = document.getElementById('loading'),
        globalSearchBoundingBox = { sw: [24.827, 44.011], ne: [39.724, 63.325] }, // Bounding box of Iran
        marker,
        rectagle;

    var tileJSONUrl = 'https://api.cedarmaps.com/v1/tiles/cedarmaps.streets.json?access_token=' +
        L.cedarmaps.accessToken;

    // Initializing our map using some options
    var map = L.cedarmaps.map('map',
        tileJSONUrl,
        {
            scrollWheelZoom: true,
            maxZoom: 17,
            minZoom: 6,
        }).setView([35.757552763570196, 51.41000747680664], 7);
    map.on('click',
        function (e) {
            if (marker) map.removeLayer(marker);
            marker = new L.marker(e.latlng).addTo(map);

            geocoder.reverseQuery(e.latlng,
                function callback(err, res) {
                    var parsedResponse =
                        ' <input type="hidden" name="province" value= " ' +
                        res.result.province +
                        ' "/>' +
                        ' <input type="hidden" name="city" value= " ' +
                        res.result.city +
                        ' "/>' +
                        ' <input type="hidden" name="locality" value= " ' +
                        res.result.locality +
                        ' "/>' +
                        ' <input type="hidden" name="address" value= " ' +
                        res.result.address +
                        ' "/>' +
                        ' <input type="hidden" name="province" value= " ' +
                        res.result.province +
                        ' "/>' +
                        ' <input type="hidden" id="lng" name="lng" value= " ' +
                        e.latlng.lng +
                        ' "/>' +
                        ' <input type="hidden"  id="lat"  name="lat" value= " ' +
                        e.latlng.lat +
                        ' "/>';
                    debugger;
                    $("form").append(parsedResponse);
                });
        });
    // Adding locate control to map
    L.control.locate({ flyTo: true }).addTo(map);

    // We need to initialize our administrativeBoundaries and geocoding module.
    var locator = L.cedarmaps.administrativeBoundaries();
    var geocoder = L.cedarmaps.geocoder('cedarmaps.streets');


    // Defining what to do after finding user's location and then binding the events
    var onLocationFound = function (location) {


        geocoder.reverseQuery(location.latlng,
            function callback(err, res) {

                autoFillForm(res.result);
            });
    };

    var locationerror = function () {
        console.log(
            'You either blocked browser from accessing your location OR there\'s something really wrong!');
    };

    map.on('locationfound', onLocationFound);
    map.on('locationerror ', locationerror);


    // For the start we need to get the list of all provinces in Iran.
    // As you can see the second param is not needed for this level because there's no parents for provinces.
    // Later on, when we want to get the list of all cities of Tehran province, the second param would be required.
    // see method: selectProvince()
    locator.query('province',
        '',
        function (err, json) {
            var html = buildOptionsList(json.results, 'name');
            provincesList.innerHTML = html;
        });


    /**
     *   The codes below this point are a very basic implementation of an address locator
     *   and could be replaced with your own logic and needs. This chunks of codes are only supposed to
     *   show you the basic concepts and not to be considered as a best practice for implementing this
     *   functionality.
     */
    var selectProvince = function (selectedOption) {
        citiesList.disabled = false;
        localitiesList.disabled = true;
        streetsInput.disabled = true;

        var value = selectedOption.value,
            sw,
            ne;

        if (!value) {
            citiesList.value = "";
            localitiesList.value = "";
            citiesList.disabled = true;
            localitiesList.disabled = true;
            sw = [24.827, 44.011], // Bounding box of Iran
                ne = [39.724, 63.325],
                globalSearchBoundingBox = { sw: sw, ne: ne };
            drawBoundary();
            map.flyToBounds([sw, ne]);

            return;
        }

        var sw = provincesList.options[provincesList.selectedIndex].getAttribute('data-sw').split(','),
            ne = provincesList.options[provincesList.selectedIndex].getAttribute('data-ne').split(',');

        globalSearchBoundingBox = { sw: sw, ne: ne };
        drawBoundary();

        map.flyToBounds([sw, ne]);

        locator.query('city',
            value,
            function (err, json) {

                var html = buildOptionsList(json.results);
                citiesList.innerHTML = html;
            });
    };

    var selectCity = function (selectedOption) {
        localitiesList.disabled = false;
        streetsInput.disabled = false;

        var value = selectedOption.value,
            sw,
            ne;

        if (!value) {
            localitiesList.value = "";
            localitiesList.disabled = true;
            streetsInput.disabled = true;
            streetsInput.value = "";
            sw = provincesList.options[provincesList.selectedIndex].getAttribute('data-sw').split(','),
                ne = provincesList.options[provincesList.selectedIndex].getAttribute('data-ne').split(',');
            globalSearchBoundingBox = { sw: sw, ne: ne };
            drawBoundary();
            map.flyToBounds([sw, ne]);

            return;
        }

        sw = citiesList.options[citiesList.selectedIndex].getAttribute('data-sw').split(','),
            ne = citiesList.options[citiesList.selectedIndex].getAttribute('data-ne').split(',');

        map.flyToBounds([sw, ne]);
        globalSearchBoundingBox = { sw: sw, ne: ne };
        drawBoundary();


        locator.query('locality',
            value,
            function (err, json) {
                var results = json ? json.results : null;

                var html = buildOptionsList(results);
                localitiesList.innerHTML = html;
            });
    };

    var selectLocality = function (selectedOption) {
        streetsInput.disabled = false;
        var value = selectedOption.value;

        if (!value) {
            sw = citiesList.options[citiesList.selectedIndex].getAttribute('data-sw').split(','),
                ne = citiesList.options[citiesList.selectedIndex].getAttribute('data-ne').split(',');
            globalSearchBoundingBox = { sw: sw, ne: ne };
            drawBoundary();
            map.flyToBounds([sw, ne]);

            return;
        }

        var sw = localitiesList.options[localitiesList.selectedIndex].getAttribute('data-sw').split(','),
            ne = localitiesList.options[localitiesList.selectedIndex].getAttribute('data-ne').split(',');

        map.flyToBounds([sw, ne]);
        globalSearchBoundingBox = { sw: sw, ne: ne };
        drawBoundary();
    };

    var buildOptionsList = function (list) {
        if (!list) return '<option value="">دیتا در این بخش در حال تکمیل است...</option>'

        var htmlArray = ['<option value="">لطفا انتخاب کنید...</option>'];

        for (var i = 0; i < list.length; i++) {
            htmlArray.push('<option data-ne="' +
                list[i].location.bb.ne +
                '" data-sw="' +
                list[i].location.bb.sw +
                '" value="' +
                list[i].name +
                '">' +
                list[i].name +
                '</option>');
        }

        return htmlArray.join('\n');
    };

    var setMarker = function (latLng, zoom) {
        // If any, removing the previously added marker of the map
        if (marker) map.removeLayer(marker);

        // Defining our custom marker
        // see: http://leafletjs.com/reference.html#marker
        var cedarmapsIcon = L.icon({
            iconUrl: 'https://api.cedarmaps.com/v1/markers/marker-default.png',
            iconSize: [98, 114],
            iconAnchor: [49, 57]
        });

        // Adding marker to the global map
        marker = new L.marker(latLng,
            {
                icon: cedarmapsIcon
            }).addTo(map);

        // Flying to the center point in zoom 15
        map.flyTo(latLng, 16);
    };
    var toggleLayer = function () {
        if (toggleCheckbox.checked) {
            drawBoundary();
        } else {
            if (rectagle) map.removeLayer(rectagle);
        }
    };

    var drawBoundary = function () {
        if (toggleCheckbox.checked) {
            // If any, removing the previously added rectagle of the map
            if (rectagle) map.removeLayer(rectagle);
            // create an orange rectangle
            var bounds = [globalSearchBoundingBox.sw, globalSearchBoundingBox.ne];
            rectagle = L.rectangle(bounds, { color: "#12132a", weight: 0 }).addTo(map);


        }
    };

    var autoFillForm = function (address) {

        locator.query('city',
            address.province,
            function (err, json) {
                citiesList.disabled = false;
                var results = json ? json.results : null;
                var html = buildOptionsList(results);
                citiesList.innerHTML = html;


                locator.query('locality',
                    address.city,
                    function (err, json) {
                        var results = json ? json.results : null;
                        var html = buildOptionsList(results);


                        localitiesList.disabled = false;
                        localitiesList.innerHTML = html;

                        provincesList.value = address.province;
                        citiesList.value = address.city;
                        localitiesList.value = address.locality;
                        streetsInput.value = address.address;
                    });

            });
    };


    // Just a random third party autocomplete module. Nothing special about this. You can have your own autocomplete module
    // https://goodies.pixabay.com/javascript/auto-complete/demo.html
    var autoCompelete = new autoComplete({
        selector: 'input[name="streets"]',
        minChars: 2,
        source: function (term, response) {
            // Let's use Cedarmaps' geocoder as the data source for our autocomplete module.
            geocoder.query({ query: term, ne: globalSearchBoundingBox.ne, sw: globalSearchBoundingBox.sw },
                function (err, res) {
                    // As of autocompelete's signature, the results should be wrapped in `response` function.
                    if (typeof res != 'undefined') response(res.results);
                });
        },
        renderItem: function (item, search) {
            var img, label;

            switch (item.type) {
                case 'street':
                    img = 'icon_street@2x.png'
                    label = 'خیابان'
                    break;
                case 'boulevard':
                    img = 'icon_boulevard@2x.png'
                    label = 'بلوار'
                    break;
                case 'roundabout':
                    img = 'icon_roundabout@2x.png'
                    label = 'میدان'
                    break;
                case 'locality':
                    img = 'icon_locality@2x.png'
                    label = 'محله'
                    break;
                case 'freeway':
                    img = 'icon_freeway@2x.png'
                    label = 'آزادراه'
                    break;
                case 'expressway':
                    img = 'icon_freeway@2x.png'
                    label = 'اتوبان'
                    break;
                case 'motorway':
                    label = 'اتوبان'
                    img = 'icon_motorway@2x.png'
                    break;
                case 'place':
                    label = 'مکان'
                    img = 'icon_place@2x.png'
                    break;
                case 'city':
                    label = 'شهر'
                    img = 'icon_place@2x.png'
                    break;
            }

            if (!item.address || item.address == '') {
                item.address = item.components.province + '، ' + item.components.city
            } else {
                item.address = item.components.province + '، ' + item.address;
            }

            return '<div class="autocomplete-suggestion" data-name="' +
                item.name +
                '" data-center="' +
                item.location.center +
                '">\
                                        <div class="address">' +
                item.name +
                '<span>' +
                item.address +
                '</span></div>\
                                        <div class="street-type">\
                                            <img src="img/' +
                img +
                '" alt="" width="20" height="20">\
                                            <span>' +
                label +
                '</span>\
                                        </div>\
                                    </div>';
        },
        onSelect: function (e, term, item) {
            streetsInput.value = item.getAttribute('data-name');
            setMarker(item.getAttribute('data-center').split(','));
        }
    });

</script>